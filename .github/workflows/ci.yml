name: Continuous Integration

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:

jobs:
  test_build_and_push:
    name: "Test, Build & Push"
    strategy: 
      matrix:
        microservice: [{name: rotations, dir: rotations}]
    runs-on: ubuntu-22.04
    permissions:
      id-token: write 
      contents: read 
    steps:
      - name: Checkout
        uses: actions/checkout@v3 
    
      - name: Configure AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::919980474747:role/github-actions
          aws-region: us-west-2 

      - name: Setup Python 3.10 
        id: python_setup 
        if: github.event_name == 'pull_request'
        uses: actions/setup-python@v4 
        with:
          python-version: '3.10.6'
          architecture: 'x64'

      - name: Install Python dependencies 
        id: python_dependencies
        working-directory: ./microservices/${{ matrix.microservice.dir }}/src
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.test.txt 

      - name: Run unit tests
        id: unit_tests
        working-directory: ./microservices/${{ matrix.microservice.dir }}/src
        run: pytest 

      - name: login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v1 

      - name: Build, tag and push to Amazon ECR
        id: build_and_push
        working-directory: ./microservices/${{ matrix.microservice.dir }}/src
        env:
          ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          ECR_REPOSITORY: karaoke-app-image-repos-dev-${{ matrix.microservice.name }}
          IMAGE_TAG: v1
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  #     - name: Write matrix outputs
  #       id: job_outputs
  #       uses: cloudposse/github-action-matrix-outputs-write@main
  #       with: 
  #         matrix-step-name: ${{ github.job }}
  #         matrix-key: ${{ matrix.microservice }}
  #         outputs: |-
  #           job_name: ${{ matrix.microservice.name }}
  #           unit_tests_outcome: ${{ steps.unit_tests.outcome }}
  #           unit_tests_stdout: ${{ steps.unit_tests.outputs.stdout }}
  #           build_and_push_outcome: ${{ steps.build_and_push.outcome }}
  #           build_and_push_stdout: ${{ steps.build_and_push.outputs.stdout }}


  # update_pull_request:
  #   name: Update Pull Request
  #   runs-on: ubuntu-22.04 
  #   needs: [test_build_and_push]
  #   permissions:
  #     pull-requests: write
  #   steps: 
  #     - name: Read build and push outcomes
  #       id: read
  #       uses: cloudposse/github-action-matrix-outputs-read@main 
  #       with:
  #         matrix-step-name: test_build_and_push

  #     - name: Write to pull request
  #       id: write_to_pull_request 
  #       uses: actions/github-script@v6 
  #       if: github.event_name == 'pull_request'
  #       env:
  #         JOB_NAME: ${{ steps.read.outputs.job_name }}
  #         TESTS_OUTCOME: ${{ steps.read.outputs.unit_tests_outcome }}
  #         TESTS_STDOUT: ${{ steps.read.outputs.unit_tests_stdout }}     
  #         BUILD_OUTCOME: ${{ steps.read.outputs.build_and_push_outcome }}
  #         BUILD_STDOUT: ${{ steps.read.outputs.build_and_push_stdout }}
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const output = `#### Microservice: \`${{ env.JOB_NAME }}\`
  #           #### Unit Tests: \`${{ env.TESTS_OUTCOME }}\`
            
  #           <details><summary>Show Unit Test Results</summary>

  #           \`\`\`
  #           ${process.env.TESTS_STDOUT}
  #           \`\`\`

  #           </details>

  #           #### Build and Push Image: \`${{ env.BUILD_OUTCOME }}\`

  #           <details><summary>Show Build and Push Results</summary>

  #           \`\`\`
  #           ${process.env.BUILD_STDOUT}
  #           \`\`\`

  #           </details>


  #           *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: output
  #           })